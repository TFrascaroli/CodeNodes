// Generated by dts-bundle v0.7.3

declare module 'codenodes' {
    import { NodeCanvas } from "codenodes/nodecanvas";
    import { Node } from "codenodes/node";
    import { CodeNodesMenu } from "codenodes/menu";
    import { ICodeNodesType } from "codenodes/interfaces/ICodeNodesType";
    import { ICodeNodesModel } from "codenodes/interfaces/ICodeNodesModel";
    export class CodeNodes {
        canvas: NodeCanvas;
        onclear: Function;
        types: ICodeNodesType[];
        menu: CodeNodesMenu;
        constructor(types: ICodeNodesType[]);
        getSVG(): SVGSVGElement;
        init(): void;
        center(): void;
        clear(): void;
        setTypes(types: ICodeNodesType[]): void;
        findType(tID: string): ICodeNodesType;
        addNode(name: string, type: string): void;
        addCollection(name: any, ofType: string): void;
        serialize(): ICodeNodesModel;
        parse(model: ICodeNodesModel): void;
        getOfType(type: string): Node[];
    }
}

declare module 'codenodes/nodecanvas' {
    import { Point } from "codenodes/point";
    import { Node } from "codenodes/node";
	import * as SvgPanZoom from "svg-pan-zoom";
    import { INodeArguments } from "codenodes/interfaces/INodeArguments";
    import { INodeModel } from "codenodes/interfaces/INodeModel";
    export class NodeCanvas {
        svg: SVGSVGElement;
        zoomingSvg: SvgPanZoom.Instance;
        ondblclick: Function;
        onclick: Function;
        constructor();
        center(): void;
        cursorPoint(evt: any): SVGPoint;
        render(): void;
        getTransform(): {
            pan: {
                x: number;
                y: number;
            };
            zoom: number;
        };
        setTransform(transform: {
            pan: {
                x: number;
                y: number;
            };
            zoom: number;
        }): void;
        convertCoords(o: Point): {
            x: number;
            y: number;
        };
        addNode(opts: INodeArguments): Node;
        init(): void;
        serialize(): INodeModel[];
        findNode(id: number): Node;
        parse(nodes: INodeModel[]): void;
        clear(): void;
        getTerminalNodes(): Node[];
        getOfType(type: string): Node[];
    }
}

declare module 'codenodes/node' {
    import { NodeValue } from "codenodes/nodevalue";
    import { NodeConnector } from "codenodes/nodeconnector";
    import { Point } from "codenodes/point";
    import { INodeArguments } from "codenodes/interfaces/INodeArguments";
    import { INodeModel } from "codenodes/interfaces/INodeModel";
    export class Node {
        g: SVGGElement;
        outputOffset: Point;
        position: Point;
        options: INodeArguments;
        onmousedown: Function;
        outputMousedown: Function;
        rectDownHandler: EventListenerOrEventListenerObject;
        outputConnectors: Array<NodeConnector>;
        outputDownHandler: EventListenerOrEventListenerObject;
        onremove: Function;
        constructor(opts: INodeArguments);
        render(parent: SVGElement): void;
        cloneLastValue(): void;
        move(x: any, y: any): void;
        serialize(): INodeModel;
        findValue(id: number): NodeValue;
        setValues(vs: {
            valueID: number;
            value: any;
        }[]): void;
        build(): any;
        remove(): void;
    }
}

declare module 'codenodes/menu' {
    import { CodeNodes } from "codenodes";
    export class CodeNodesMenu {
        g: SVGGElement;
        constructor(main: CodeNodes);
        open(x: number, y: number): void;
        close(): void;
    }
}

declare module 'codenodes/interfaces/ICodeNodesType' {
    import { ICodeNodesValueSchema as schema } from "codenodes/interfaces/ICodeNodesValueSchema";
    export interface ICodeNodesType {
        id: string;
        name: string;
        description: string;
        builder: Function;
        clone: Function;
        clonable: boolean;
        outputType: string;
        outputMultiple: boolean;
        schema: Array<schema>;
    }
}

declare module 'codenodes/interfaces/ICodeNodesModel' {
    import { INodeModel } from "codenodes/interfaces/INodeModel";
    export interface ICodeNodesModel {
        nodes: INodeModel[];
        transform: {
            pan: {
                x: number;
                y: number;
            };
            zoom: number;
        };
    }
}

declare module 'codenodes/point' {
    export class Point {
        x: number;
        y: number;
        constructor(x: number, y: number);
    }
}

declare module 'codenodes/interfaces/INodeArguments' {
    import { ICodeNodesType } from "codenodes/interfaces/ICodeNodesType";
    export interface INodeArguments {
        id: number;
        title: string;
        type: ICodeNodesType;
        isCollection: boolean;
        x: number;
        y: number;
    }
}

declare module 'codenodes/interfaces/INodeModel' {
    import { INodeArguments } from "codenodes/interfaces/INodeArguments";
    export interface INodeModel {
        arguments: INodeArguments;
        values: [{
            valueID: number;
            value: any;
        }];
        outputConnectors: [{
            nodeTo: number;
            valueTo: number;
        }];
    }
}

declare module 'codenodes/nodevalue' {
    import { Node } from "codenodes/node";
    import { NodeConnector } from "codenodes/nodeconnector";
    import { ICodeNodesValueSchema } from "codenodes/interfaces/ICodeNodesValueSchema";
    export class NodeValue {
        parentNode: Node;
        inputConnector: NodeConnector;
        __internalGetValue: Function;
        __internalSetValue: Function;
        options: ICodeNodesValueSchema;
        constructor(opts: ICodeNodesValueSchema, node: Node);
        render(parent: SVGElement, position: number): void;
        getSerializedValue(): any;
        getDotPosition(): {
            x: number;
            y: number;
        };
        remove(): void;
        updateConectorPosition(): void;
        getValue(): any;
    }
}

declare module 'codenodes/nodeconnector' {
    import { Node } from "codenodes/node";
    import { Point } from "codenodes/point";
    import { NodeValue } from "codenodes/nodevalue";
    export class NodeConnector {
        end1: Node;
        end2: NodeValue;
        sp: Point;
        ep: Point;
        path: SVGPathElement;
        constructor(sp: Point, node: Node);
        setPath(): void;
        remove(): void;
        moveEndPoint(point: any): void;
    }
}

declare module 'codenodes/interfaces/ICodeNodesValueSchema' {
    export interface ICodeNodesValueSchema {
        id: number;
        name: string;
        type: string;
        mode: string;
        options: any;
        multiple: boolean;
    }
}

