{"version":3,"sources":["codenodes.ts"],"names":[],"mappings":"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","file":"codenodes.js","sourcesContent":["import {NodeCanvas} from \"./nodecanvas\";\r\nimport {CodeNodesMenu} from \"./menu\";\r\nimport {Point} from \"./point\";\r\nimport {ICodeNodesTypes} from \"./ICodeNodesTypes\";\r\nimport {ICodeNodesValueSchema} from \"./ICodeNodesValueSchema\";\r\n\r\n export class CodeNodes {\r\n    \r\n    private canvas: NodeCanvas;\r\n    public types:{(key: string): ICodeNodesTypes};\r\n    private menu: CodeNodesMenu;\r\n    private menuPoint: Point;\r\n\r\n\r\n    constructor (types: {(key: string): ICodeNodesTypes}) {\r\n        let self = this;\r\n        this.canvas = new NodeCanvas();\r\n        this.types = types;\r\n        this.menu = new CodeNodesMenu(this);\r\n        this.canvas.ondblclick = function (p: Point, rawP: Point) {\r\n            self.menuPoint = p;\r\n            self.menu.open(rawP.x + 20, rawP.y - 70);\r\n        }\r\n        this.canvas.onclick = function () {\r\n            self.menu.close();\r\n        }\r\n    };\r\n\r\n    getSVG () {\r\n        this.canvas.render();\r\n        return this.canvas.svg;\r\n    };\r\n\r\n    init () {\r\n        this.canvas.init();\r\n        this.canvas.svg.appendChild(this.menu.g);\r\n    };\r\n\r\n    center () {\r\n        this.canvas.center();\r\n    }\r\n\r\n    public addNode (name, type) {\r\n        let t = this.types[type];\r\n        if (t) {\r\n            let outputType = t.outputType || type;\r\n            let ot: ICodeNodesTypes = this.types[outputType];\r\n            if (ot) {\r\n                let p = this.menuPoint || {x: 10, y: 10};\r\n                this.canvas.addNode(name, t.builder, t.schema, type, t.clonable || false, t.clone, false, outputType, p.x, p.y);\r\n            } else {\r\n                console.log(\"There is no type \" + outputType + \" registered. Can not assign output type.\");\r\n            }\r\n        } else {\r\n            console.log(\"There is no type \" + type + \" registered\");\r\n        }\r\n    };\r\n    private collectionBuilder () {\r\n        function flatten(arr) {\r\n            return arr.reduce(function (flat, toFlatten) {\r\n            return flat.concat(Array.isArray(toFlatten) ? flatten(toFlatten) : toFlatten);\r\n            }, []);\r\n        }\r\n        return flatten(arguments).filter(function (v) {\r\n            return typeof v !== \"undefined\";\r\n        });\r\n    };\r\n    private collectionClone (arr) {\r\n        return arr;\r\n        // return arr.map(function (e) {\r\n        //     return e.clone()\r\n        // }); TODO: Arreglar aix√≤\r\n    };\r\n    public addCollection (name, ofType: string) {\r\n        let t: ICodeNodesTypes = this.types[ofType];\r\n        if (t) {\r\n            let outputType = t.outputType || ofType;\r\n            let ot: ICodeNodesTypes = this.types[outputType];\r\n            if (ot) {\r\n                let collectionSchema: Array<ICodeNodesValueSchema> = [\r\n                    {\r\n                        onBuild: true,\r\n                        name: \" - \" + ofType,\r\n                        type: ofType,\r\n                        mode: \"in\",\r\n                        options: null,\r\n                        multiple: false\r\n                    }\r\n                ];\r\n                let p = this.menuPoint || {x: 10, y: 10};\r\n                this.canvas.addNode(name, this.collectionBuilder, collectionSchema, ofType, ot.clonable || false, this.collectionClone, true, outputType, p.x, p.y);\r\n            } else {\r\n                console.log(\"There is no type \" + outputType + \" registered. Can not assign output type.\");\r\n            }\r\n        } else {\r\n            console.log(\"There is no type \" + ofType + \" registered\");\r\n        }\r\n    };\r\n}"]}